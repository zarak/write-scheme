-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Please see the README on GitHub at
--   <a>https://github.com/zarak/write-scheme#readme</a>
@package write-scheme
@version 0.1.0.0

module Lib
data LispVal
Atom :: String -> LispVal
List :: [LispVal] -> LispVal
DottedList :: [LispVal] -> LispVal -> LispVal
Number :: Integer -> LispVal
String :: String -> LispVal
Bool :: Bool -> LispVal
symbol :: Parser Char
readExpr :: String -> String
spaces :: Parser ()
parseString :: Parser LispVal
parseAtom :: Parser LispVal
parseNumber :: Parser LispVal
parseExpr :: Parser LispVal

module Exercises

-- | <b>Exercise 1</b>
--   
--   Change the program so it reads <i>two</i> arguments from the command
--   line, and prints out a message using both of them.
readTwoArgs :: [String] -> String

-- | <b>Exercise 2</b>
--   
--   Change the program so it performs a simple arithmetic operation on the
--   two arguments and prints out the result.
arithmetic :: [String] -> String

-- | <b>Exercise 3</b>
--   
--   <tt>getLine</tt> is an IO action that reads a line from the console
--   and returns it as a string. Change the program so it prompts for a
--   name, reads the name, and then prints that instead of the command line
--   value.
promptForName :: IO ()

-- | <b>Exercise 4</b>
--   
--   Rewrite <tt>parseNumber</tt>, without <tt>liftM</tt>, using
--   
--   <ol>
--   <li>do-notation</li>
--   <li>explicit sequencing with the <tt>&gt;&gt;=</tt> operator</li>
--   </ol>
parseNumber :: Parser LispVal

-- | <b>Exercise 4</b>
--   
--   Equivalent version of <a>parseNumber</a> using <tt>&gt;&gt;=</tt>.
parseNumber' :: Parser LispVal

-- | <b>Exercise 5</b>
--   
--   Our strings aren't quite R5RS compliant, because they don't support
--   escaping of internal quotes within the string. Change
--   <a>parseString</a> so that <tt>"</tt> gives a literal quote character
--   instead of terminating the string. You may want to replace <tt>noneOf
--   """</tt> with a new parser action that accepts <i>either</i> a
--   non-quote character <i>or</i> a backslash followed by a quote mark.
parseEsc :: a
